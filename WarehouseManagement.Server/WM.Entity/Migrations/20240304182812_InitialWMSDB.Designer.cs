// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WM.Entity.Models;

#nullable disable

namespace WM.Entity.Migrations
{
    [DbContext(typeof(WarehouseManagementContext))]
    [Migration("20240304182812_InitialWMSDB")]
    partial class InitialWMSDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoadsGood", b =>
                {
                    b.Property<int>("LoadsId")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.HasKey("LoadsId", "GoodsId");

                    b.HasIndex("GoodsId");

                    b.ToTable("LoadsGoods", (string)null);
                });

            modelBuilder.Entity("RoleFeature", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int")
                        .HasColumnName("featureId");

                    b.HasKey("RoleId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("RoleFeature", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ActionType", b =>
                {
                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ActionId");

                    b.ToTable("ActionType", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.AvailableForReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.Property<int?>("ExportId")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExportId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("ImportId");

                    b.ToTable("AvailableForReturns");
                });

            modelBuilder.Entity("WM.Entity.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Delivery", b =>
                {
                    b.Property<int>("DeliveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveyId"));

                    b.Property<string>("DeliveryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeliveyId");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.EmailToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailToken", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ExportOrder", b =>
                {
                    b.Property<int>("ExportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExportId"));

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Denied")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ExportId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.ToTable("ExportOrder", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ExportOrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int>("ExportId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("LoadsId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("ExportId");

                    b.ToTable("ExportOrderDetail", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("featureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Featurename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("featurename");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("WM.Entity.Models.Good", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoodsId"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("DefaultMeasuredUnit")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GoodsCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<int?>("MaxStock")
                        .HasColumnType("int");

                    b.Property<int?>("MinStock")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<float>("StockPrice")
                        .HasColumnType("real");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarrantyTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.HasKey("GoodsId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("WM.Entity.Models.GoodsHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<string>("ActionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("AmountDifferential")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<float?>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("CostPriceDifferential")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<string>("PriceDifferential")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("ActionId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("UserId");

                    b.ToTable("GoodsHistory", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ImportOrder", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"));

                    b.Property<DateTime?>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImportCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<float>("TotalCost")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ImportId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("ImportOrder", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ImportOrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<float>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("Imagee")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imagee");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int?>("LoadsId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportOrderDetail", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Load", b =>
                {
                    b.Property<int>("LoadsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoadsId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("image");

                    b.Property<int?>("IsPaid")
                        .HasColumnType("int")
                        .HasColumnName("isPaid");

                    b.Property<string>("LoadsCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoadsId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UserId");

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("WM.Entity.Models.MeasuredUnit", b =>
                {
                    b.Property<int>("MeasuredUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasuredUnitId"));

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<string>("MeasuredUnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MeasuredUnitValue")
                        .HasColumnType("int");

                    b.Property<float?>("SuggestedPrice")
                        .HasColumnType("real");

                    b.HasKey("MeasuredUnitId");

                    b.HasIndex("GoodsId");

                    b.ToTable("MeasuredUnit", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.HasKey("ProjectId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("nvarchar(44)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ReturnsOrder", b =>
                {
                    b.Property<int>("ReturnsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnsId"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int?>("ExportId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("ImportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Imported")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ReturnsCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReturnsId");

                    b.HasIndex("ExportId");

                    b.HasIndex("ImportId");

                    b.HasIndex("State");

                    b.HasIndex("StorageId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("ReturnsOrder", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.ReturnsOrderDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredUnitId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ReturnsId")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("MeasuredUnitId");

                    b.HasIndex("ReturnsId");

                    b.ToTable("ReturnsOrderDetail", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.StocktakeNote", b =>
                {
                    b.Property<int>("StocktakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StocktakeId"));

                    b.Property<DateTime?>("Canceled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StocktakeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedId")
                        .HasColumnType("int");

                    b.HasKey("StocktakeId");

                    b.HasIndex("CreatedId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.HasIndex("UpdatedId");

                    b.ToTable("StocktakeNote", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.StocktakeNoteDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<int>("ActualStock")
                        .HasColumnType("int");

                    b.Property<int>("AmountDifferential")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StocktakeId")
                        .HasColumnType("int");

                    b.HasKey("DetailId");

                    b.HasIndex("GoodsId");

                    b.HasIndex("StocktakeId");

                    b.ToTable("StocktakeNoteDetail", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<string>("StorageAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StorageId");

                    b.ToTable("Storage", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierEmail")
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupplierPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("SupplierId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("WM.Entity.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<string>("UserCode")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StorageId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("LoadsGood", b =>
                {
                    b.HasOne("WM.Entity.Models.Good", null)
                        .WithMany()
                        .HasForeignKey("GoodsId")
                        .IsRequired()
                        .HasConstraintName("FK_LoadsGoods_Goods");

                    b.HasOne("WM.Entity.Models.Load", null)
                        .WithMany()
                        .HasForeignKey("LoadsId")
                        .IsRequired()
                        .HasConstraintName("FK_LoadsGoods_Loads");
                });

            modelBuilder.Entity("RoleFeature", b =>
                {
                    b.HasOne("WM.Entity.Models.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Features");

                    b.HasOne("WM.Entity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleFeature_Role");
                });

            modelBuilder.Entity("WM.Entity.Models.AvailableForReturn", b =>
                {
                    b.HasOne("WM.Entity.Models.ExportOrder", "Export")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("ExportId");

                    b.HasOne("WM.Entity.Models.Good", "Goods")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("GoodsId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.ImportOrder", "Import")
                        .WithMany("AvailableForReturns")
                        .HasForeignKey("ImportId");

                    b.Navigation("Export");

                    b.Navigation("Goods");

                    b.Navigation("Import");
                });

            modelBuilder.Entity("WM.Entity.Models.EmailToken", b =>
                {
                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("EmailTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ExportOrder", b =>
                {
                    b.HasOne("WM.Entity.Models.Project", "Project")
                        .WithMany("ExportOrders")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Project");

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("ExportOrders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ExportOrder_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("ExportOrders")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("ExportOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Storage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ExportOrderDetail", b =>
                {
                    b.HasOne("WM.Entity.Models.ExportOrder", "Export")
                        .WithMany("ExportOrderDetails")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");
                });

            modelBuilder.Entity("WM.Entity.Models.Good", b =>
                {
                    b.HasOne("WM.Entity.Models.Category", "Category")
                        .WithMany("Goods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("Goods")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Goods_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("Goods")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Supplier", "Supplier")
                        .WithMany("Goods")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Status");

                    b.Navigation("Storage");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WM.Entity.Models.GoodsHistory", b =>
                {
                    b.HasOne("WM.Entity.Models.ActionType", "Action")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Good", "Goods")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("GoodsHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Goods");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ImportOrder", b =>
                {
                    b.HasOne("WM.Entity.Models.Project", "Project")
                        .WithMany("ImportOrders")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_Project");

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("ImportOrders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ImportOrder_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("ImportOrders")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Supplier", "Supplier")
                        .WithMany("ImportOrders")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("ImportOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("Storage");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ImportOrderDetail", b =>
                {
                    b.HasOne("WM.Entity.Models.ImportOrder", "Import")
                        .WithMany("ImportOrderDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");
                });

            modelBuilder.Entity("WM.Entity.Models.Load", b =>
                {
                    b.HasOne("WM.Entity.Models.Delivery", "Delivery")
                        .WithMany("Loads")
                        .HasForeignKey("DeliveryId")
                        .HasConstraintName("FK_Loads_Delivery");

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("Loads")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Loads_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("Loads")
                        .HasForeignKey("StorageId")
                        .IsRequired()
                        .HasConstraintName("FK_Loads_Storage");

                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("Loads")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Loads_User");

                    b.Navigation("Delivery");

                    b.Navigation("Status");

                    b.Navigation("Storage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.MeasuredUnit", b =>
                {
                    b.HasOne("WM.Entity.Models.Good", "Goods")
                        .WithMany("MeasuredUnits")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("WM.Entity.Models.RefreshToken", b =>
                {
                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ReturnsOrder", b =>
                {
                    b.HasOne("WM.Entity.Models.ExportOrder", "Export")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("ExportId");

                    b.HasOne("WM.Entity.Models.ImportOrder", "Import")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("ImportId");

                    b.HasOne("WM.Entity.Models.Status", "StateNavigation")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("State")
                        .IsRequired()
                        .HasConstraintName("FK_ReturnsOrder_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Supplier", "Supplier")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("SupplierId");

                    b.HasOne("WM.Entity.Models.User", "User")
                        .WithMany("ReturnsOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Export");

                    b.Navigation("Import");

                    b.Navigation("StateNavigation");

                    b.Navigation("Storage");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WM.Entity.Models.ReturnsOrderDetail", b =>
                {
                    b.HasOne("WM.Entity.Models.Good", "Goods")
                        .WithMany("ReturnsOrderDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.MeasuredUnit", "MeasuredUnit")
                        .WithMany("ReturnsOrderDetails")
                        .HasForeignKey("MeasuredUnitId");

                    b.HasOne("WM.Entity.Models.ReturnsOrder", "Returns")
                        .WithMany("ReturnsOrderDetails")
                        .HasForeignKey("ReturnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("MeasuredUnit");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("WM.Entity.Models.StocktakeNote", b =>
                {
                    b.HasOne("WM.Entity.Models.User", "CreatedNavigation")
                        .WithMany("StocktakeNoteCreatedNavigations")
                        .HasForeignKey("CreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("StocktakeNotes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_StocktakeNote_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("StocktakeNotes")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.User", "UpdatedNavigation")
                        .WithMany("StocktakeNoteUpdatedNavigations")
                        .HasForeignKey("UpdatedId");

                    b.Navigation("CreatedNavigation");

                    b.Navigation("Status");

                    b.Navigation("Storage");

                    b.Navigation("UpdatedNavigation");
                });

            modelBuilder.Entity("WM.Entity.Models.StocktakeNoteDetail", b =>
                {
                    b.HasOne("WM.Entity.Models.Good", "Goods")
                        .WithMany("StocktakeNoteDetails")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.StocktakeNote", "Stocktake")
                        .WithMany("StocktakeNoteDetails")
                        .HasForeignKey("StocktakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Stocktake");
                });

            modelBuilder.Entity("WM.Entity.Models.Supplier", b =>
                {
                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("Suppliers")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Supplier_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("Suppliers")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WM.Entity.Models.User", b =>
                {
                    b.HasOne("WM.Entity.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WM.Entity.Models.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Status");

                    b.HasOne("WM.Entity.Models.Storage", "Storage")
                        .WithMany("Users")
                        .HasForeignKey("StorageId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WM.Entity.Models.ActionType", b =>
                {
                    b.Navigation("GoodsHistories");
                });

            modelBuilder.Entity("WM.Entity.Models.Category", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("WM.Entity.Models.Delivery", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("WM.Entity.Models.ExportOrder", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("ExportOrderDetails");

                    b.Navigation("ReturnsOrders");
                });

            modelBuilder.Entity("WM.Entity.Models.Good", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("GoodsHistories");

                    b.Navigation("MeasuredUnits");

                    b.Navigation("ReturnsOrderDetails");

                    b.Navigation("StocktakeNoteDetails");
                });

            modelBuilder.Entity("WM.Entity.Models.ImportOrder", b =>
                {
                    b.Navigation("AvailableForReturns");

                    b.Navigation("ImportOrderDetails");

                    b.Navigation("ReturnsOrders");
                });

            modelBuilder.Entity("WM.Entity.Models.MeasuredUnit", b =>
                {
                    b.Navigation("ReturnsOrderDetails");
                });

            modelBuilder.Entity("WM.Entity.Models.Project", b =>
                {
                    b.Navigation("ExportOrders");

                    b.Navigation("ImportOrders");
                });

            modelBuilder.Entity("WM.Entity.Models.ReturnsOrder", b =>
                {
                    b.Navigation("ReturnsOrderDetails");
                });

            modelBuilder.Entity("WM.Entity.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WM.Entity.Models.Status", b =>
                {
                    b.Navigation("ExportOrders");

                    b.Navigation("Goods");

                    b.Navigation("ImportOrders");

                    b.Navigation("Loads");

                    b.Navigation("ReturnsOrders");

                    b.Navigation("StocktakeNotes");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WM.Entity.Models.StocktakeNote", b =>
                {
                    b.Navigation("StocktakeNoteDetails");
                });

            modelBuilder.Entity("WM.Entity.Models.Storage", b =>
                {
                    b.Navigation("ExportOrders");

                    b.Navigation("Goods");

                    b.Navigation("ImportOrders");

                    b.Navigation("Loads");

                    b.Navigation("ReturnsOrders");

                    b.Navigation("StocktakeNotes");

                    b.Navigation("Suppliers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WM.Entity.Models.Supplier", b =>
                {
                    b.Navigation("Goods");

                    b.Navigation("ImportOrders");

                    b.Navigation("ReturnsOrders");
                });

            modelBuilder.Entity("WM.Entity.Models.User", b =>
                {
                    b.Navigation("EmailTokens");

                    b.Navigation("ExportOrders");

                    b.Navigation("GoodsHistories");

                    b.Navigation("ImportOrders");

                    b.Navigation("Loads");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ReturnsOrders");

                    b.Navigation("StocktakeNoteCreatedNavigations");

                    b.Navigation("StocktakeNoteUpdatedNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
